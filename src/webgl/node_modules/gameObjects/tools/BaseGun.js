var three = require('three');
var cannon = require('cannon');
var Signal = require('signals').Signal;
var CollisionLayers = require('CollisionLayers');
var geomLib = require('geometry/lib');
var matLib = require('materials/lib');

function BaseGun(world, pos, geometry, material) {
	
	// bodyShape.material = groundMaterial;
	var shape = new cannon.Sphere(0.65);
	var toolBody = new cannon.Body({
		mass: 50, // kg 
		shape: shape,
		fixedRotation: true,
		linearDamping: 0.5,
		resistGravity: true,
		collisionFilterGroup: CollisionLayers.ITEMS,
		collisionFilterMask: CollisionLayers.ENVIRONMENT | CollisionLayers.PLAYER | CollisionLayers.ITEMS
	});
	// toolBody.resistGravity = true;
	var bodySphereRecipe = [
		[0, 1, 0, 0.5]
	];
	for(var i = 0; i < bodySphereRecipe.length; i++) {
		var d = bodySphereRecipe[i];
		var shape = new cannon.Sphere(d[3]);
		toolBody.addShape(shape, new cannon.Vec3(d[0], d[1], d[2]));
	}
	toolBody.quaternion.setFromEuler(0, 0, 0);
	toolBody.position.set(pos.x, pos.y, pos.z);
	var toolMaterial = material || matLib.checkerboards();
	var toolMesh = new three.Mesh(
		geometry || geomLib.gunBase(),
		toolMaterial
	);

	var nozzle = new three.Vector3(0, 0, 0);
	toolMesh.geometry.vertices.forEach(v => {
		if(v.y < nozzle.y) nozzle.y = v.y;
	})


	toolBody.interactiveObject = { type: "tool", object: this };

	var pivot = new three.Object3D();
	pivot.add(toolMesh);

	this.world = world;
	this.mesh = pivot;
	this.nozzle = nozzle;
	this.subMesh = toolMesh;
	this.body = toolBody;
	this.bodySphereRecipe = bodySphereRecipe;

	this.onEnterFrameUnclaimed = onEnterFrameUnclaimed.bind(this);
	this.onEnterFrameEquipped = onEnterFrameEquipped.bind(this);
	this.onEnterFrame = onEnterFrameUnclaimed.bind(this);
	this.primaryFireStart = primaryFireStart.bind(this);
}

var spinSpeed = 0.05;
function onEnterFrameUnclaimed(timeScale) {
	this.subMesh.rotation.z += spinSpeed * timeScale;
}
function onEnterFrameEquipped(timeScale) {
	this.subMesh.rotation.y += spinSpeed * timeScale;
}

function primaryFireStart(pos, playerSize) {
	this.world.makeBall(pos, playerSize);
}

module.exports = BaseGun;