var signals = require('signals');
var three = require('three');
var cannon = require('cannon');
var CollisionLayers = require('CollisionLayers');
var geomLib = require('geometry/lib');
var matLib = require('materials/lib');
var BaseGun = require('./tools/BaseGun');

function Portal(world, pos) {
	var radius = 1.5;
	var geometry = geomLib.sphere(radius, 32, 16);
	var material = matLib.checkerboards(0xffffff*Math.random(), 0xffffff*Math.random());
	material.side = three.BackSide;
	// material.colorWrite = false;

	var shape = new cannon.Sphere(radius);
	var body = new cannon.Body({
		mass: 5 * Math.pow(radius, 3), // kg 
		position: pos,
		type: cannon.Body.DYNAMIC,
		shape: shape,
		linearDamping: 0.6,
		angularDamping: 0.6,
		collisionFilterGroup: CollisionLayers.PORTALS,
		collisionFilterMask: CollisionLayers.ENVIRONMENT | CollisionLayers.PLAYER | CollisionLayers.PORTALS | CollisionLayers.ITEMS
	});
	body.resistGravity = true;

	// body.quaternion.setFromEuler(0, 0, 0);
	var mesh = new three.Mesh(
		geometry,
		material
	);

	body.interactiveObject = { type: "portal", object: this };
	var onPlayerEnterSignal = new signals.Signal();
	var onPlayerExitSignal = new signals.Signal();
	this.onPlayerEnterSignal = onPlayerEnterSignal;
	this.onPlayerExitSignal = onPlayerExitSignal;

	this.world = world;
	this.mesh = mesh;
	this.body = body;
	this.onEnterFrame = function onEnterFrame() {
		if(world.player.homeWorld != world) {
			return;
		}
		var dist = world.player.camera.localToWorld(new three.Vector3()).sub(mesh.position).length();
		if(!world.player.insidePortal && dist < radius * 0.99) {
			world.player.insidePortal = true;
			console.log("inside " + this.name);
			var normalizedCrosshairPos = world.player.camera.worldToLocal(this.mesh.position);
			console.log(normalizedCrosshairPos);
			// debugger;
			onPlayerEnterSignal.dispatch(normalizedCrosshairPos.z > 0);
			console.log("distance " + dist);
		} else if(world.player.insidePortal && dist > radius * 1.01) {
			world.player.insidePortal = false;
			console.log("outside " + this.name);
			onPlayerExitSignal.dispatch();
			console.log("distance " + dist);
		}
	}

	Object.defineProperty(this, 'inside', {
		get: function() { return inside; },
		set: function(val) { inside = val; }
	});
}

module.exports = Portal;