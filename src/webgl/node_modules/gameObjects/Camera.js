var cannon = require('cannon');
var three = require('three');
var CollisionLayers = require('CollisionLayers');

function Camera(scene, camera, inputManager, world) {
	var quat = new cannon.Quaternion();
	quat.setFromEuler(Math.PI * -0.5, 0, Math.PI);
	var body = new cannon.Body({
		position: new cannon.Vec3(0, 6, 1.75), // m 
		quaternion: quat, // m 
		// fixedRotation: true,
		linearDamping: 0.5,
		// resistGravity: true,
		collisionFilterGroup: CollisionLayers.PLAYER,
		collisionFilterMask: CollisionLayers.ENVIRONMENT | CollisionLayers.ITEMS
	});
	// body.resistGravity = true;
	// var mesh = new three.Mesh(
	// 	new three.SphereGeometry(1, 32, 16),
	// 	new three.MeshBasicMaterial({
	// 		color: 0xffffff,
	// 		wireframe: true
	// 	})
	// );
	var mesh = new three.Object3D();


	camera = camera || new three.PerspectiveCamera(60, 0.1, 100);
	mesh.add(camera);

	var inputContainer = inputManager.fpsController.getInput();
	var forward = new cannon.Vec3(0, 0, -1);
	var delta = new cannon.Quaternion();
	var impulse = new cannon.Vec3();

	function onUpdateSim() {
		inputManager.fpsController.update();
		delta.setFromEuler(inputContainer.rotationX, inputContainer.rotationY, 0);
		body.quaternion.mult(delta, body.quaternion);
		body.lookAt(body.pointToWorldFrame(forward));
		impulse.set(inputContainer.moveX, inputContainer.moveY, inputContainer.moveZ);
		body.quaternion.vmult(impulse, impulse);
		body.position.vadd(impulse, body.position);
		inputManager.fpsController.clear();
	}

	this.body = body;
	this.mesh = mesh;
	this.camera = camera;
	this.onUpdateSim = onUpdateSim.bind(this);
}

module.exports = Camera;