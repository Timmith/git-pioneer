var cannon = require('cannon');
var three = require('three');
var CollisionLayers = require('CollisionLayers');

function Camera(scene, camera, inputManager, world) {
	var quat = new cannon.Quaternion();
	quat.setFromEuler(Math.PI * -0.5, 0, Math.PI);
	var body = new cannon.Body({
		position: new cannon.Vec3(0, 6, 1.75), // m 
		quaternion: quat, // m 
		// fixedRotation: true,
		linearDamping: 0.5,
		resistGravity: true,
		collisionFilterGroup: CollisionLayers.PLAYER,
		collisionFilterMask: CollisionLayers.ENVIRONMENT | CollisionLayers.ITEMS
	});
	body.resistGravity = true;
	var mesh = new three.Mesh(
		new three.SphereGeometry(1, 32, 16),
		new three.MeshBasicMaterial({
			color: 0xffffff,
			wireframe: true
		})
	);

	camera = camera || new three.PerspectiveCamera(60, 0.1, 100);
	mesh.add(camera);

	function onUpdateSim() {
		inputManager.fpsController.update();
		inputManager.fpsController.camera;
		camera.rotation.set(0, 0, 0);
		// debugger;
	}

	this.body = body;
	this.mesh = mesh;
	this.camera = camera;
	this.onUpdateSim = onUpdateSim.bind(this);
}

module.exports = Camera;