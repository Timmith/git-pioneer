var three = require('three');
var cannon = require('cannon');
var CheckerboardTexture = require('threejs-texture-checkerboard');

require('extensions/threeCannon');

function GrappleLink(world, bodyA, bodyB) {

	var spring = new cannon.Spring(bodyA, bodyB, {
		restLength: 0,
		localAnchorA: new cannon.Vec3(),
		localAnchorB: new cannon.Vec3()
	});

	var geom = new three.SphereGeometry(0.5, 16, 8);
	var t = 0;
	geom.vertices.forEach(v => {
		v.y += 0.5;
		t = v.z;
		v.z = v.y;
		v.y = t;
	});
	var mat = new three.MeshBasicMaterial({
		wireframe: true
	});

	var mesh = new three.Mesh(geom, mat);
	world.scene.add(mesh);

	this.spring = spring;
	this.mesh = mesh;
	
	this.onCannonPostStep = onCannonPostStep.bind(this);
	this.onEnterFrame = onEnterFrame.bind(this);
	world.world.addEventListener("postStep", this.onCannonPostStep);	//TODO clean this up when removed from world
}

function onCannonPostStep(event) {
	this.spring.applyForce();
}

function onEnterFrame() {
	this.mesh.position.copy(this.spring.bodyA.position);
	var target = this.spring.bodyB.position.toThree();
	this.mesh.lookAt(target);
	var stretch = this.mesh.position.clone().sub(target).length();
	var squash = 1 / stretch;
	this.mesh.scale.set(squash, squash, stretch);
}

module.exports = GrappleLink;