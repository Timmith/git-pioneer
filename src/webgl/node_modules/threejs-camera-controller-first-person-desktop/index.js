var Keyboard = require('game-keyboard');
var keyMap = require("game-keyboard/key_map")["US"];
var PointerTrap = require('pointer-trap-relative');
var MouseWheel = require('input-mousewheel');
var defined = require('defined');
function FPSCameraController(element, options) {
	options = options || {};
	var _keyboard = new Keyboard(keyMap);
	var _mouseWheel = new MouseWheel(element);

	var _movementSpeed = defined(options.movementSpeed, .1);
	var _movementRunSpeedScale = defined(options.movementRunSpeedScale, 2.5);
	var _rotationSpeed = defined(options.rotationSpeed, .005);
	var _minFov = defined(options.minFov, 10);
	var _maxFov = defined(options.maxFov, 100);
	var _zoomSpeed = defined(options.zoomSpeed, .001);
	var _rotateActive = defined(options.rotateActive, false);
	var _rotateActiveOnlyInPointerLock = defined(options.rotateActiveOnlyInPointerLock, true);
	var _arrowKeysRotate = defined(options.arrowKeysRotate, false);
	var _movementSpeedScale = 1;
	if(!_rotateActiveOnlyInPointerLock) _rotateActive = true;

	var _pointerTrap = new PointerTrap(element);
	
	var inputContainer = {
		rotationX: 0,
		rotationY: 0,
		fov: 0,
		moveX: 0,
		moveY: 0,
		moveZ: 0
	}

	inputContainer.clear = function clear() {
		this.rotationX = 0;
		this.rotationY = 0;
		this.fov = 0;
		this.moveX = 0;
		this.moveY = 0;
		this.moveZ = 0;
	}.bind(inputContainer);

	function onPointerTrapData(pos) {
		if(_rotateActive) {
			inputContainer.rotationY += (pos.x * -_rotationSpeed);
			inputContainer.rotationX += (pos.y * -_rotationSpeed);
		}
	}
	//mouse
	_pointerTrap.on('data', onPointerTrapData);

	_pointerTrap.onAttainSignal.add(function() {
		if(_rotateActiveOnlyInPointerLock) _rotateActive = true;
	})
	_pointerTrap.onReleaseSignal.add(function() {
		if(_rotateActiveOnlyInPointerLock) _rotateActive = false;
	})
	var _onPointerLockAttainSignal = _pointerTrap.onAttainSignal;
	var _onPointerLockReleaseSignal = _pointerTrap.onReleaseSignal;

	function zoomOnMouseWheel(val) {
		var zoom = val * _zoomSpeed;
		inputContainer.fov *= (1+zoom);
		inputContainer.fov = Math.min(_maxFov, Math.max(_minFov, inputContainer.fov))
	}
	//mouse wheel
	_mouseWheel.onWheelSignal.add(zoomOnMouseWheel);

	function processInput() {
		if(_keyboard.isPressed('shift')) {
			_movementSpeedScale = _movementRunSpeedScale;
		} else {
			_movementSpeedScale = 1;
		}
		if(_keyboard.isPressed('a')) {
			inputContainer.moveX += (-_movementSpeed * _movementSpeedScale);
		}
		if(_keyboard.isPressed('d')) {
			inputContainer.moveX += (_movementSpeed * _movementSpeedScale);
		}
		if(_keyboard.isPressed('w')) {
			inputContainer.moveZ += (-_movementSpeed * _movementSpeedScale);
		}
		if(_keyboard.isPressed('s')) {
			inputContainer.moveZ += (_movementSpeed * _movementSpeedScale);
		}
		if(_keyboard.isPressed('e')) {
			inputContainer.moveY += (_movementSpeed * _movementSpeedScale);
		}
		if(_keyboard.isPressed('q')) {
			inputContainer.moveY += (-_movementSpeed * _movementSpeedScale);
		}
		if(_arrowKeysRotate) {
			if(_keyboard.isPressed('left')) {
				inputContainer.rotationY += (_rotationSpeed);
			}
			if(_keyboard.isPressed('right')) {
				inputContainer.rotationY += (-_rotationSpeed);
			}
			if(_keyboard.isPressed('up')) {
				inputContainer.rotationX += (_rotationSpeed);
			}
			if(_keyboard.isPressed('down')) {
				inputContainer.rotationX += (-_rotationSpeed);
			}
		}
	}

	//public
	this.onPointerLockAttainSignal = _onPointerLockAttainSignal;
	this.onPointerLockReleaseSignal = _onPointerLockReleaseSignal;

	Object.defineProperty(this, 'keyboard', {
		get: function() { return _keyboard; }
	});
	Object.defineProperty(this, 'movementSpeed', {
		get: function() { return _movementSpeed; },
		set: function(val) { _movementSpeed = val; }
	});
	Object.defineProperty(this, 'rotationSpeed', {
		get: function() { return _rotationSpeed; },
		set: function(val) { _rotationSpeed = val; }
	});
	Object.defineProperty(this, 'zoomSpeed', {
		get: function() { return _zoomSpeed; },
		set: function(val) { _zoomSpeed = val; }
	});

	function getInput() {
		return inputContainer;
	} 

	this.update = processInput.bind(this);
	this.clear = inputContainer.clear;
	this.getInput = getInput;
}

module.exports = FPSCameraController;
